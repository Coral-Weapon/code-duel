
//PROMPT

/*
* Each new term in the Fibonacci sequence is generated by 
* adding the previous two terms.By starting with 1 and 2, 
* the first 10 terms will be:
* 
* 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
* 
* Write a function that, given N, finds the sum of all the 
* even numbers within the first N terms of the Fibonacci 
* sequence.
*
* For instance
*
* evenFib(10) = 44 // (2 + 8 + 34)
* evenFib(5) = 10 // (2 + 8 = 10)
* evenFib(2) = 2
* evenFib(1) = 0
*/

// FUNCTION SHELL

var evenFib = function(n) {

};

// COMPLETE FUNCTION

var evenFib = function(n) {
	var evenCount = 0;
	var prevFib = 1;
	var currentFib = 1;
	for (var i = 2; i <= n; i++) {
		var nextFib = currentFib + prevFib;
		prevFib = currentFib;
		currentFib = nextFib;
		if (currentFib % 2 === 0) {
			evenCount += currentFib;
		}
	}
	return evenCount;
};

// COMPLETE BUT WRONG FUNCTION

var evenFib = function(n) {
	var evenCount = 0;
	var prevFib = 1;
	var currentFib = 1;
	for (var i = 2; i < n; i++) {
		var nextFib = currentFib + prevFib;
		prevFib = currentFib;
		currentFib = nextFib;
		if (currentFib % 2 === 0) {
			evenCount += currentFib;
		}
	}
	return evenCount;
};

// TESTS

var chai = require('chai')
var assert = chai.assert;
var should = chai.should();
var expect = chai.expect;

describe('Count even fibonacci numbers up to N', function() {
  it('should count numbers below a particular threshold', function(){
  	evenFib(10).should.equal(44);
  });
  it('should count more than 1 number', function(){
  	evenFib(5).should.equal(10);
  });
  it('count even numbers up to and including the nth fibonacci number', function(){
  	evenFib(2).should.equal(2);
  });
  it('should not find any numbers when starting at 1', function(){
  	evenFib(1).should.equal(0);
  });
  it('should not break when looking for 0 fibonacci numbers', function(){
  	evenFib(0).should.equal(0);
  });
});